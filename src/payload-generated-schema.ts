/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  serial,
  timestamp,
  varchar,
  numeric,
  integer,
  type AnyPgColumn,
  text,
  boolean,
  jsonb,
  pgEnum,
} from '@payloadcms/db-postgres/drizzle/pg-core';
import { sql, relations } from '@payloadcms/db-postgres/drizzle';
export const enum__locales = pgEnum('enum__locales', ['en', 'no', 'se', 'dk', 'de', 'fi', 'it', 'pl', 'uk']);
export const enum_cms_content_pages_blocks_hero_color = pgEnum('enum_cms_content_pages_blocks_hero_color', [
  'dark',
  'light',
  'white',
]);
export const enum_cms_content_pages_blocks_hero_image_placement = pgEnum(
  'enum_cms_content_pages_blocks_hero_image_placement',
  ['left', 'right', 'behind'],
);
export const enum_cms_content_pages_status = pgEnum('enum_cms_content_pages_status', ['draft', 'published']);
export const enum__cms_content_pages_v_blocks_hero_color = pgEnum('enum__cms_content_pages_v_blocks_hero_color', [
  'dark',
  'light',
  'white',
]);
export const enum__cms_content_pages_v_blocks_hero_image_placement = pgEnum(
  'enum__cms_content_pages_v_blocks_hero_image_placement',
  ['left', 'right', 'behind'],
);
export const enum__cms_content_pages_v_version_status = pgEnum('enum__cms_content_pages_v_version_status', [
  'draft',
  'published',
]);
export const enum__cms_content_pages_v_published_locale = pgEnum('enum__cms_content_pages_v_published_locale', [
  'en',
  'no',
  'se',
  'dk',
  'de',
  'fi',
  'it',
  'pl',
  'uk',
]);

export const cms_users = pgTable(
  'cms_users',
  {
    id: serial('id').primaryKey(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    cms_users_updated_at_idx: index('cms_users_updated_at_idx').on(columns.updatedAt),
    cms_users_created_at_idx: index('cms_users_created_at_idx').on(columns.createdAt),
    cms_users_email_idx: uniqueIndex('cms_users_email_idx').on(columns.email),
  }),
);

export const cms_media = pgTable(
  'cms_media',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
  },
  (columns) => ({
    cms_media_updated_at_idx: index('cms_media_updated_at_idx').on(columns.updatedAt),
    cms_media_created_at_idx: index('cms_media_created_at_idx').on(columns.createdAt),
    cms_media_filename_idx: uniqueIndex('cms_media_filename_idx').on(columns.filename),
  }),
);

export const cms_products = pgTable(
  'cms_products',
  {
    id: serial('id').primaryKey(),
    product_id: numeric('product_id'),
    sku: varchar('sku').notNull(),
    category: integer('category_id').references(() => cms_product_categories.id, {
      onDelete: 'set null',
    }),
    description_en: varchar('description_en'),
    description_no: varchar('description_no'),
    description_se: varchar('description_se'),
    description_dk: varchar('description_dk'),
    description_de: varchar('description_de'),
    description_fi: varchar('description_fi'),
    description_it: varchar('description_it'),
    description_pl: varchar('description_pl'),
    description_uk: varchar('description_uk'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
  },
  (columns) => ({
    cms_products_product_id_idx: uniqueIndex('cms_products_product_id_idx').on(columns.product_id),
    cms_products_sku_idx: uniqueIndex('cms_products_sku_idx').on(columns.sku),
    cms_products_category_idx: index('cms_products_category_idx').on(columns.category),
    cms_products_updated_at_idx: index('cms_products_updated_at_idx').on(columns.updatedAt),
    cms_products_created_at_idx: index('cms_products_created_at_idx').on(columns.createdAt),
  }),
);

export const cms_product_categories = pgTable(
  'cms_product_categories',
  {
    id: serial('id').primaryKey(),
    category: varchar('category').notNull(),
    en: varchar('en'),
    no: varchar('no'),
    se: varchar('se'),
    dk: varchar('dk'),
    de: varchar('de'),
    fi: varchar('fi'),
    it: varchar('it'),
    pl: varchar('pl'),
    uk: varchar('uk'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
  },
  (columns) => ({
    cms_product_categories_category_idx: uniqueIndex('cms_product_categories_category_idx').on(columns.category),
    cms_product_categories_updated_at_idx: index('cms_product_categories_updated_at_idx').on(columns.updatedAt),
    cms_product_categories_created_at_idx: index('cms_product_categories_created_at_idx').on(columns.createdAt),
  }),
);

export const cms_product_category_groups = pgTable(
  'cms_product_category_groups',
  {
    id: serial('id').primaryKey(),
    path: varchar('path').notNull(),
    parent: integer('parent_id').references((): AnyPgColumn => cms_product_category_groups.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
  },
  (columns) => ({
    cms_product_category_groups_path_idx: uniqueIndex('cms_product_category_groups_path_idx').on(columns.path),
    cms_product_category_groups_parent_idx: index('cms_product_category_groups_parent_idx').on(columns.parent),
    cms_product_category_groups_updated_at_idx: index('cms_product_category_groups_updated_at_idx').on(
      columns.updatedAt,
    ),
    cms_product_category_groups_created_at_idx: index('cms_product_category_groups_created_at_idx').on(
      columns.createdAt,
    ),
  }),
);

export const cms_product_category_products_list = pgTable(
  'cms_product_category_products_list',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    category: integer('category_id').references(() => cms_product_categories.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
  },
  (columns) => ({
    cms_product_category_products_list_category_idx: index('cms_product_category_products_list_category_idx').on(
      columns.category,
    ),
    cms_product_category_products_list_updated_at_idx: index('cms_product_category_products_list_updated_at_idx').on(
      columns.updatedAt,
    ),
    cms_product_category_products_list_created_at_idx: index('cms_product_category_products_list_created_at_idx').on(
      columns.createdAt,
    ),
  }),
);

export const cms_content_pages_blocks_hero = pgTable(
  'cms_content_pages_blocks_hero',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    color: enum_cms_content_pages_blocks_hero_color('color').default('light'),
    imagePlacement: enum_cms_content_pages_blocks_hero_image_placement('image_placement').default('left'),
    squareImage: boolean('square_image').default(false),
    fullWidth: boolean('full_width').default(false),
    imageFade: boolean('image_fade').default(false),
    image: integer('image_id').references(() => cms_media.id, {
      onDelete: 'set null',
    }),
    title: varchar('title'),
    text: varchar('text'),
    link_title: varchar('link_title'),
    link_target: varchar('link_target'),
    textLink_title: varchar('text_link_title'),
    textLink_target: varchar('text_link_target'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('cms_content_pages_blocks_hero_order_idx').on(columns._order),
    _parentIDIdx: index('cms_content_pages_blocks_hero_parent_id_idx').on(columns._parentID),
    _pathIdx: index('cms_content_pages_blocks_hero_path_idx').on(columns._path),
    cms_content_pages_blocks_hero_image_idx: index('cms_content_pages_blocks_hero_image_idx').on(columns.image),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [cms_content_pages.id],
      name: 'cms_content_pages_blocks_hero_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const cms_content_pages = pgTable(
  'cms_content_pages',
  {
    id: serial('id').primaryKey(),
    slug: varchar('slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    _status: enum_cms_content_pages_status('_status').default('draft'),
  },
  (columns) => ({
    cms_content_pages_slug_idx: uniqueIndex('cms_content_pages_slug_idx').on(columns.slug),
    cms_content_pages_updated_at_idx: index('cms_content_pages_updated_at_idx').on(columns.updatedAt),
    cms_content_pages_created_at_idx: index('cms_content_pages_created_at_idx').on(columns.createdAt),
    cms_content_pages__status_idx: index('cms_content_pages__status_idx').on(columns._status),
  }),
);

export const cms_content_pages_locales = pgTable(
  'cms_content_pages_locales',
  {
    localizedSlug: varchar('localized_slug').default(''),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('cms_content_pages_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [cms_content_pages.id],
      name: 'cms_content_pages_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _cms_content_pages_v_blocks_hero = pgTable(
  '_cms_content_pages_v_blocks_hero',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    color: enum__cms_content_pages_v_blocks_hero_color('color').default('light'),
    imagePlacement: enum__cms_content_pages_v_blocks_hero_image_placement('image_placement').default('left'),
    squareImage: boolean('square_image').default(false),
    fullWidth: boolean('full_width').default(false),
    imageFade: boolean('image_fade').default(false),
    image: integer('image_id').references(() => cms_media.id, {
      onDelete: 'set null',
    }),
    title: varchar('title'),
    text: varchar('text'),
    link_title: varchar('link_title'),
    link_target: varchar('link_target'),
    textLink_title: varchar('text_link_title'),
    textLink_target: varchar('text_link_target'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_cms_content_pages_v_blocks_hero_order_idx').on(columns._order),
    _parentIDIdx: index('_cms_content_pages_v_blocks_hero_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_cms_content_pages_v_blocks_hero_path_idx').on(columns._path),
    _cms_content_pages_v_blocks_hero_image_idx: index('_cms_content_pages_v_blocks_hero_image_idx').on(columns.image),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_cms_content_pages_v.id],
      name: '_cms_content_pages_v_blocks_hero_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _cms_content_pages_v = pgTable(
  '_cms_content_pages_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => cms_content_pages.id, {
      onDelete: 'set null',
    }),
    version_slug: varchar('version_slug'),
    version_updatedAt: timestamp('version_updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
    version_createdAt: timestamp('version_created_at', { mode: 'string', withTimezone: true, precision: 3 }),
    version__status: enum__cms_content_pages_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    snapshot: boolean('snapshot'),
    publishedLocale: enum__cms_content_pages_v_published_locale('published_locale'),
    latest: boolean('latest'),
  },
  (columns) => ({
    _cms_content_pages_v_parent_idx: index('_cms_content_pages_v_parent_idx').on(columns.parent),
    _cms_content_pages_v_version_version_slug_idx: index('_cms_content_pages_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _cms_content_pages_v_version_version_updated_at_idx: index(
      '_cms_content_pages_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _cms_content_pages_v_version_version_created_at_idx: index(
      '_cms_content_pages_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _cms_content_pages_v_version_version__status_idx: index('_cms_content_pages_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _cms_content_pages_v_created_at_idx: index('_cms_content_pages_v_created_at_idx').on(columns.createdAt),
    _cms_content_pages_v_updated_at_idx: index('_cms_content_pages_v_updated_at_idx').on(columns.updatedAt),
    _cms_content_pages_v_snapshot_idx: index('_cms_content_pages_v_snapshot_idx').on(columns.snapshot),
    _cms_content_pages_v_published_locale_idx: index('_cms_content_pages_v_published_locale_idx').on(
      columns.publishedLocale,
    ),
    _cms_content_pages_v_latest_idx: index('_cms_content_pages_v_latest_idx').on(columns.latest),
  }),
);

export const _cms_content_pages_v_locales = pgTable(
  '_cms_content_pages_v_locales',
  {
    version_localizedSlug: varchar('version_localized_slug').default(''),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('_cms_content_pages_v_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_cms_content_pages_v.id],
      name: '_cms_content_pages_v_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(columns.globalSlug),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(columns.updatedAt),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(columns.createdAt),
  }),
);

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    cms_usersID: integer('cms_users_id'),
    cms_mediaID: integer('cms_media_id'),
    cms_productsID: integer('cms_products_id'),
    cms_product_categoriesID: integer('cms_product_categories_id'),
    cms_product_category_groupsID: integer('cms_product_category_groups_id'),
    cms_product_category_products_listID: integer('cms_product_category_products_list_id'),
    content_pagesID: integer('cms_content_pages_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_cms_users_id_idx: index('payload_locked_documents_rels_cms_users_id_idx').on(
      columns.cms_usersID,
    ),
    payload_locked_documents_rels_cms_media_id_idx: index('payload_locked_documents_rels_cms_media_id_idx').on(
      columns.cms_mediaID,
    ),
    payload_locked_documents_rels_cms_products_id_idx: index('payload_locked_documents_rels_cms_products_id_idx').on(
      columns.cms_productsID,
    ),
    payload_locked_documents_rels_cms_product_categories_id_idx: index(
      'payload_locked_documents_rels_cms_product_categories_id_idx',
    ).on(columns.cms_product_categoriesID),
    payload_locked_documents_rels_cms_product_category_groups_id_idx: index(
      'payload_locked_documents_rels_cms_product_category_groups_id_idx',
    ).on(columns.cms_product_category_groupsID),
    payload_locked_documents_rels_cms_product_category_products_list_id_idx: index(
      'payload_locked_documents_rels_cms_product_category_products_list_id_idx',
    ).on(columns.cms_product_category_products_listID),
    payload_locked_documents_rels_cms_content_pages_id_idx: index(
      'payload_locked_documents_rels_cms_content_pages_id_idx',
    ).on(columns.content_pagesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    cms_usersIdFk: foreignKey({
      columns: [columns['cms_usersID']],
      foreignColumns: [cms_users.id],
      name: 'payload_locked_documents_rels_cms_users_fk',
    }).onDelete('cascade'),
    cms_mediaIdFk: foreignKey({
      columns: [columns['cms_mediaID']],
      foreignColumns: [cms_media.id],
      name: 'payload_locked_documents_rels_cms_media_fk',
    }).onDelete('cascade'),
    cms_productsIdFk: foreignKey({
      columns: [columns['cms_productsID']],
      foreignColumns: [cms_products.id],
      name: 'payload_locked_documents_rels_cms_products_fk',
    }).onDelete('cascade'),
    cms_product_categoriesIdFk: foreignKey({
      columns: [columns['cms_product_categoriesID']],
      foreignColumns: [cms_product_categories.id],
      name: 'payload_locked_documents_rels_cms_product_categories_fk',
    }).onDelete('cascade'),
    cms_product_category_groupsIdFk: foreignKey({
      columns: [columns['cms_product_category_groupsID']],
      foreignColumns: [cms_product_category_groups.id],
      name: 'payload_locked_documents_rels_cms_product_category_groups_fk',
    }).onDelete('cascade'),
    cms_product_category_products_listIdFk: foreignKey({
      columns: [columns['cms_product_category_products_listID']],
      foreignColumns: [cms_product_category_products_list.id],
      name: 'payload_locked_documents_rels_cms_product_category_products_list_fk',
    }).onDelete('cascade'),
    content_pagesIdFk: foreignKey({
      columns: [columns['content_pagesID']],
      foreignColumns: [cms_content_pages.id],
      name: 'payload_locked_documents_rels_content_pages_fk',
    }).onDelete('cascade'),
  }),
);

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(columns.updatedAt),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(columns.createdAt),
  }),
);

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    cms_usersID: integer('cms_users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_cms_users_id_idx: index('payload_preferences_rels_cms_users_id_idx').on(
      columns.cms_usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    cms_usersIdFk: foreignKey({
      columns: [columns['cms_usersID']],
      foreignColumns: [cms_users.id],
      name: 'payload_preferences_rels_cms_users_fk',
    }).onDelete('cascade'),
  }),
);

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(columns.updatedAt),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(columns.createdAt),
  }),
);

export const relations_cms_users = relations(cms_users, () => ({}));
export const relations_cms_media = relations(cms_media, () => ({}));
export const relations_cms_products = relations(cms_products, ({ one }) => ({
  category: one(cms_product_categories, {
    fields: [cms_products.category],
    references: [cms_product_categories.id],
    relationName: 'category',
  }),
}));
export const relations_cms_product_categories = relations(cms_product_categories, () => ({}));
export const relations_cms_product_category_groups = relations(cms_product_category_groups, ({ one }) => ({
  parent: one(cms_product_category_groups, {
    fields: [cms_product_category_groups.parent],
    references: [cms_product_category_groups.id],
    relationName: 'parent',
  }),
}));
export const relations_cms_product_category_products_list = relations(
  cms_product_category_products_list,
  ({ one }) => ({
    category: one(cms_product_categories, {
      fields: [cms_product_category_products_list.category],
      references: [cms_product_categories.id],
      relationName: 'category',
    }),
  }),
);
export const relations_cms_content_pages_blocks_hero = relations(cms_content_pages_blocks_hero, ({ one }) => ({
  _parentID: one(cms_content_pages, {
    fields: [cms_content_pages_blocks_hero._parentID],
    references: [cms_content_pages.id],
    relationName: '_blocks_hero',
  }),
  image: one(cms_media, {
    fields: [cms_content_pages_blocks_hero.image],
    references: [cms_media.id],
    relationName: 'image',
  }),
}));
export const relations_cms_content_pages_locales = relations(cms_content_pages_locales, ({ one }) => ({
  _parentID: one(cms_content_pages, {
    fields: [cms_content_pages_locales._parentID],
    references: [cms_content_pages.id],
    relationName: '_locales',
  }),
}));
export const relations_cms_content_pages = relations(cms_content_pages, ({ many }) => ({
  _blocks_hero: many(cms_content_pages_blocks_hero, {
    relationName: '_blocks_hero',
  }),
  _locales: many(cms_content_pages_locales, {
    relationName: '_locales',
  }),
}));
export const relations__cms_content_pages_v_blocks_hero = relations(_cms_content_pages_v_blocks_hero, ({ one }) => ({
  _parentID: one(_cms_content_pages_v, {
    fields: [_cms_content_pages_v_blocks_hero._parentID],
    references: [_cms_content_pages_v.id],
    relationName: '_blocks_hero',
  }),
  image: one(cms_media, {
    fields: [_cms_content_pages_v_blocks_hero.image],
    references: [cms_media.id],
    relationName: 'image',
  }),
}));
export const relations__cms_content_pages_v_locales = relations(_cms_content_pages_v_locales, ({ one }) => ({
  _parentID: one(_cms_content_pages_v, {
    fields: [_cms_content_pages_v_locales._parentID],
    references: [_cms_content_pages_v.id],
    relationName: '_locales',
  }),
}));
export const relations__cms_content_pages_v = relations(_cms_content_pages_v, ({ one, many }) => ({
  parent: one(cms_content_pages, {
    fields: [_cms_content_pages_v.parent],
    references: [cms_content_pages.id],
    relationName: 'parent',
  }),
  _blocks_hero: many(_cms_content_pages_v_blocks_hero, {
    relationName: '_blocks_hero',
  }),
  _locales: many(_cms_content_pages_v_locales, {
    relationName: '_locales',
  }),
}));
export const relations_payload_locked_documents_rels = relations(payload_locked_documents_rels, ({ one }) => ({
  parent: one(payload_locked_documents, {
    fields: [payload_locked_documents_rels.parent],
    references: [payload_locked_documents.id],
    relationName: '_rels',
  }),
  cms_usersID: one(cms_users, {
    fields: [payload_locked_documents_rels.cms_usersID],
    references: [cms_users.id],
    relationName: 'cms_users',
  }),
  cms_mediaID: one(cms_media, {
    fields: [payload_locked_documents_rels.cms_mediaID],
    references: [cms_media.id],
    relationName: 'cms_media',
  }),
  cms_productsID: one(cms_products, {
    fields: [payload_locked_documents_rels.cms_productsID],
    references: [cms_products.id],
    relationName: 'cms_products',
  }),
  cms_product_categoriesID: one(cms_product_categories, {
    fields: [payload_locked_documents_rels.cms_product_categoriesID],
    references: [cms_product_categories.id],
    relationName: 'cms_product_categories',
  }),
  cms_product_category_groupsID: one(cms_product_category_groups, {
    fields: [payload_locked_documents_rels.cms_product_category_groupsID],
    references: [cms_product_category_groups.id],
    relationName: 'cms_product_category_groups',
  }),
  cms_product_category_products_listID: one(cms_product_category_products_list, {
    fields: [payload_locked_documents_rels.cms_product_category_products_listID],
    references: [cms_product_category_products_list.id],
    relationName: 'cms_product_category_products_list',
  }),
  content_pagesID: one(cms_content_pages, {
    fields: [payload_locked_documents_rels.content_pagesID],
    references: [cms_content_pages.id],
    relationName: 'content_pages',
  }),
}));
export const relations_payload_locked_documents = relations(payload_locked_documents, ({ many }) => ({
  _rels: many(payload_locked_documents_rels, {
    relationName: '_rels',
  }),
}));
export const relations_payload_preferences_rels = relations(payload_preferences_rels, ({ one }) => ({
  parent: one(payload_preferences, {
    fields: [payload_preferences_rels.parent],
    references: [payload_preferences.id],
    relationName: '_rels',
  }),
  cms_usersID: one(cms_users, {
    fields: [payload_preferences_rels.cms_usersID],
    references: [cms_users.id],
    relationName: 'cms_users',
  }),
}));
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}));
export const relations_payload_migrations = relations(payload_migrations, () => ({}));

type DatabaseSchema = {
  enum__locales: typeof enum__locales;
  enum_cms_content_pages_blocks_hero_color: typeof enum_cms_content_pages_blocks_hero_color;
  enum_cms_content_pages_blocks_hero_image_placement: typeof enum_cms_content_pages_blocks_hero_image_placement;
  enum_cms_content_pages_status: typeof enum_cms_content_pages_status;
  enum__cms_content_pages_v_blocks_hero_color: typeof enum__cms_content_pages_v_blocks_hero_color;
  enum__cms_content_pages_v_blocks_hero_image_placement: typeof enum__cms_content_pages_v_blocks_hero_image_placement;
  enum__cms_content_pages_v_version_status: typeof enum__cms_content_pages_v_version_status;
  enum__cms_content_pages_v_published_locale: typeof enum__cms_content_pages_v_published_locale;
  cms_users: typeof cms_users;
  cms_media: typeof cms_media;
  cms_products: typeof cms_products;
  cms_product_categories: typeof cms_product_categories;
  cms_product_category_groups: typeof cms_product_category_groups;
  cms_product_category_products_list: typeof cms_product_category_products_list;
  cms_content_pages_blocks_hero: typeof cms_content_pages_blocks_hero;
  cms_content_pages: typeof cms_content_pages;
  cms_content_pages_locales: typeof cms_content_pages_locales;
  _cms_content_pages_v_blocks_hero: typeof _cms_content_pages_v_blocks_hero;
  _cms_content_pages_v: typeof _cms_content_pages_v;
  _cms_content_pages_v_locales: typeof _cms_content_pages_v_locales;
  payload_locked_documents: typeof payload_locked_documents;
  payload_locked_documents_rels: typeof payload_locked_documents_rels;
  payload_preferences: typeof payload_preferences;
  payload_preferences_rels: typeof payload_preferences_rels;
  payload_migrations: typeof payload_migrations;
  relations_cms_users: typeof relations_cms_users;
  relations_cms_media: typeof relations_cms_media;
  relations_cms_products: typeof relations_cms_products;
  relations_cms_product_categories: typeof relations_cms_product_categories;
  relations_cms_product_category_groups: typeof relations_cms_product_category_groups;
  relations_cms_product_category_products_list: typeof relations_cms_product_category_products_list;
  relations_cms_content_pages_blocks_hero: typeof relations_cms_content_pages_blocks_hero;
  relations_cms_content_pages_locales: typeof relations_cms_content_pages_locales;
  relations_cms_content_pages: typeof relations_cms_content_pages;
  relations__cms_content_pages_v_blocks_hero: typeof relations__cms_content_pages_v_blocks_hero;
  relations__cms_content_pages_v_locales: typeof relations__cms_content_pages_v_locales;
  relations__cms_content_pages_v: typeof relations__cms_content_pages_v;
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels;
  relations_payload_locked_documents: typeof relations_payload_locked_documents;
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels;
  relations_payload_preferences: typeof relations_payload_preferences;
  relations_payload_migrations: typeof relations_payload_migrations;
};

declare module '@payloadcms/db-postgres/types' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema;
  }
}
