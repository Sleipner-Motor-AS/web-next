/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  serial,
  timestamp,
  varchar,
  numeric,
  integer,
  jsonb,
} from '@payloadcms/db-postgres/drizzle/pg-core';
import { sql, relations } from '@payloadcms/db-postgres/drizzle';

export const cms_users = pgTable(
  'cms_users',
  {
    id: serial('id').primaryKey(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    cms_users_updated_at_idx: index('cms_users_updated_at_idx').on(columns.updatedAt),
    cms_users_created_at_idx: index('cms_users_created_at_idx').on(columns.createdAt),
    cms_users_email_idx: uniqueIndex('cms_users_email_idx').on(columns.email),
  }),
);

export const cms_media = pgTable(
  'cms_media',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
  },
  (columns) => ({
    cms_media_updated_at_idx: index('cms_media_updated_at_idx').on(columns.updatedAt),
    cms_media_created_at_idx: index('cms_media_created_at_idx').on(columns.createdAt),
    cms_media_filename_idx: uniqueIndex('cms_media_filename_idx').on(columns.filename),
  }),
);

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(columns.globalSlug),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(columns.updatedAt),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(columns.createdAt),
  }),
);

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    cms_usersID: integer('cms_users_id'),
    cms_mediaID: integer('cms_media_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_cms_users_id_idx: index('payload_locked_documents_rels_cms_users_id_idx').on(
      columns.cms_usersID,
    ),
    payload_locked_documents_rels_cms_media_id_idx: index('payload_locked_documents_rels_cms_media_id_idx').on(
      columns.cms_mediaID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    cms_usersIdFk: foreignKey({
      columns: [columns['cms_usersID']],
      foreignColumns: [cms_users.id],
      name: 'payload_locked_documents_rels_cms_users_fk',
    }).onDelete('cascade'),
    cms_mediaIdFk: foreignKey({
      columns: [columns['cms_mediaID']],
      foreignColumns: [cms_media.id],
      name: 'payload_locked_documents_rels_cms_media_fk',
    }).onDelete('cascade'),
  }),
);

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(columns.updatedAt),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(columns.createdAt),
  }),
);

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    cms_usersID: integer('cms_users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_cms_users_id_idx: index('payload_preferences_rels_cms_users_id_idx').on(
      columns.cms_usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    cms_usersIdFk: foreignKey({
      columns: [columns['cms_usersID']],
      foreignColumns: [cms_users.id],
      name: 'payload_preferences_rels_cms_users_fk',
    }).onDelete('cascade'),
  }),
);

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(columns.updatedAt),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(columns.createdAt),
  }),
);

export const relations_cms_users = relations(cms_users, () => ({}));
export const relations_cms_media = relations(cms_media, () => ({}));
export const relations_payload_locked_documents_rels = relations(payload_locked_documents_rels, ({ one }) => ({
  parent: one(payload_locked_documents, {
    fields: [payload_locked_documents_rels.parent],
    references: [payload_locked_documents.id],
    relationName: '_rels',
  }),
  cms_usersID: one(cms_users, {
    fields: [payload_locked_documents_rels.cms_usersID],
    references: [cms_users.id],
    relationName: 'cms_users',
  }),
  cms_mediaID: one(cms_media, {
    fields: [payload_locked_documents_rels.cms_mediaID],
    references: [cms_media.id],
    relationName: 'cms_media',
  }),
}));
export const relations_payload_locked_documents = relations(payload_locked_documents, ({ many }) => ({
  _rels: many(payload_locked_documents_rels, {
    relationName: '_rels',
  }),
}));
export const relations_payload_preferences_rels = relations(payload_preferences_rels, ({ one }) => ({
  parent: one(payload_preferences, {
    fields: [payload_preferences_rels.parent],
    references: [payload_preferences.id],
    relationName: '_rels',
  }),
  cms_usersID: one(cms_users, {
    fields: [payload_preferences_rels.cms_usersID],
    references: [cms_users.id],
    relationName: 'cms_users',
  }),
}));
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}));
export const relations_payload_migrations = relations(payload_migrations, () => ({}));

type DatabaseSchema = {
  cms_users: typeof cms_users;
  cms_media: typeof cms_media;
  payload_locked_documents: typeof payload_locked_documents;
  payload_locked_documents_rels: typeof payload_locked_documents_rels;
  payload_preferences: typeof payload_preferences;
  payload_preferences_rels: typeof payload_preferences_rels;
  payload_migrations: typeof payload_migrations;
  relations_cms_users: typeof relations_cms_users;
  relations_cms_media: typeof relations_cms_media;
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels;
  relations_payload_locked_documents: typeof relations_payload_locked_documents;
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels;
  relations_payload_preferences: typeof relations_payload_preferences;
  relations_payload_migrations: typeof relations_payload_migrations;
};

declare module '@payloadcms/db-postgres/types' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema;
  }
}
